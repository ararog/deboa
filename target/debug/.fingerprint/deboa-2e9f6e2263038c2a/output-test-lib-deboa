{"$message_type":"diagnostic","message":"method `poll_close` is not a member of trait `AsyncWrite`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":2316,"byte_end":2592,"line_start":79,"line_end":84,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn poll_close(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {","highlight_start":5,"highlight_end":92},{"text":"        match &mut *self {","highlight_start":1,"highlight_end":27},{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_close(cx),","highlight_start":1,"highlight_end":74},{"text":"            SmolStream::Tls(stream) => Pin::new(stream).poll_close(cx),","highlight_start":1,"highlight_end":72},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `AsyncWrite`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is an associated function with a similar name","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":2319,"byte_end":2329,"line_start":79,"line_end":79,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn poll_close(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":"poll_flush","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `poll_close` is not a member of trait `AsyncWrite`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:79:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    fn poll_close(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is an associated function with a similar name: `poll_flush`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _____|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match &mut *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_close(cx),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Tls(stream) => Pin::new(stream).poll_close(cx),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `AsyncWrite`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `TlsStream` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-net-2.0.0/src/tcp.rs","byte_start":10575,"byte_end":10595,"line_start":335,"line_end":335,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub struct TcpStream {","highlight_start":1,"highlight_end":21}],"label":"similarly named struct `TcpStream` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":1542,"byte_end":1551,"line_start":51,"line_end":51,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    Tls(TlsStream<TcpStream>),","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1542,"byte_end":1551,"line_start":51,"line_end":51,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    Tls(TlsStream<TcpStream>),","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"TcpStream","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `TlsStream` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:51:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Tls(TlsStream<TcpStream>),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `TcpStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-net-2.0.0/src/tcp.rs:335:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct TcpStream {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `TcpStream` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `task` in `smol`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5323,"byte_end":5327,"line_start":184,"line_end":184,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        smol::task::spawn(async move {","highlight_start":15,"highlight_end":19}],"label":"could not find `task` in `smol`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5323,"byte_end":5327,"line_start":184,"line_end":184,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        smol::task::spawn(async move {","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"Task","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider importing this module","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":47,"byte_end":47,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tokio::task;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you import `task`, refer to it directly","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5317,"byte_end":5323,"line_start":184,"line_end":184,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        smol::task::spawn(async move {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `task` in `smol`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:184:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        smol::task::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `task` in `smol`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a struct with a similar name exists\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        smol::\u001b[0m\u001b[0m\u001b[38;5;9mtask\u001b[0m\u001b[0m::spawn(async move {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        smol::\u001b[0m\u001b[0m\u001b[38;5;10mTask\u001b[0m\u001b[0m::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this module\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use tokio::task;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you import `task`, refer to it directly\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;9msmol::\u001b[0m\u001b[0mtask::spawn(async move {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        task::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `poll_read` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1695,"byte_end":1704,"line_start":58,"line_end":58,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"        buf: &mut [u8],","highlight_start":14,"highlight_end":23}],"label":"expected `tokio::io::ReadBuf<'_>`, found `[u8]`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(std::pin::Pin<&mut runtimes::smol::SmolStream>, &mut std::task::Context<'_>, &mut tokio::io::ReadBuf<'_>) -> std::task::Poll<std::result::Result<(), _>>`\n   found signature `fn(std::pin::Pin<&mut runtimes::smol::SmolStream>, &mut std::task::Context<'_>, &mut [u8]) -> std::task::Poll<std::result::Result<usize, _>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1695,"byte_end":1704,"line_start":58,"line_end":58,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"        buf: &mut [u8],","highlight_start":14,"highlight_end":23}],"label":null,"suggested_replacement":"&mut tokio::io::ReadBuf<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `poll_read` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:58:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        buf: &mut [u8],\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `tokio::io::ReadBuf<'_>`, found `[u8]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(std::pin::Pin<&mut runtimes::smol::SmolStream>, &mut std::task::Context<\u001b[0m\u001b[0m\u001b[1m\u001b[35m'_\u001b[0m\u001b[0m>, &mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mtokio::io::ReadBuf<'_>\u001b[0m\u001b[0m) -> std::task::Poll<std::result::Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m, _>>`\u001b[0m\n\u001b[0m              found signature `fn(std::pin::Pin<&mut runtimes::smol::SmolStream>, &mut std::task::Context<\u001b[0m\u001b[0m\u001b[1m\u001b[35m'_\u001b[0m\u001b[0m>, &mut \u001b[0m\u001b[0m\u001b[1m\u001b[35m[u8]\u001b[0m\u001b[0m) -> std::task::Poll<std::result::Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35musize\u001b[0m\u001b[0m, _>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        buf: \u001b[0m\u001b[0m\u001b[38;5;9m&mut [u8]\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        buf: \u001b[0m\u001b[0m\u001b[38;5;10m&mut tokio::io::ReadBuf<'_>\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"not all trait items implemented, missing: `poll_shutdown`","code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1941,"byte_end":1971,"line_start":67,"line_end":67,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"impl AsyncWrite for SmolStream {","highlight_start":1,"highlight_end":31}],"label":"missing `poll_shutdown` in implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"implement the missing item: `fn poll_shutdown(self: std::pin::Pin<&mut Self>, _: &mut std::task::Context<'_>) -> std::task::Poll<std::result::Result<(), std::io::Error>> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":2875,"byte_end":2875,"line_start":92,"line_end":92,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn poll_shutdown(self: std::pin::Pin<&mut Self>, _: &mut std::task::Context<'_>) -> std::task::Poll<std::result::Result<(), std::io::Error>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0046]\u001b[0m\u001b[0m\u001b[1m: not all trait items implemented, missing: `poll_shutdown`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:67:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl AsyncWrite for SmolStream {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `poll_shutdown` in implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: \u001b[0m\u001b[0mimplement the missing item: `fn poll_shutdown(self: std::pin::Pin<&mut Self>, _: &mut std::task::Context<'_>) -> std::task::Poll<std::result::Result<(), std::io::Error>> { todo!() }`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `async_native_tls`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1147,"byte_end":1163,"line_start":36,"line_end":36,"column_start":30,"column_end":46,"is_primary":true,"text":[{"text":"                let stream = async_native_tls::connect(host.to_string(), stream).await?;","highlight_start":30,"highlight_end":46}],"label":"use of unresolved module or unlinked crate `async_native_tls`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `async_native_tls`, use `cargo add async_native_tls` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `async_native_tls`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:36:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let stream = async_native_tls::connect(host.to_string(), stream).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `async_native_tls`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `async_native_tls`, use `cargo add async_native_tls` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1389,"byte_end":1407,"line_start":43,"line_end":43,"column_start":46,"column_end":64,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":46,"highlight_end":64}],"label":"the trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1388,"line_start":43,"line_end":43,"column_start":8,"column_end":45,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":45}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncRead`:\n  &[u8]\n  &mut T\n  &smol::Async<T>\n  piper::Reader\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4542,"byte_end":4546,"line_start":129,"line_end":129,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":8,"highlight_end":12}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncRead`:\u001b[0m\n\u001b[0m              &[u8]\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Reader\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1389,"byte_end":1407,"line_start":43,"line_end":43,"column_start":46,"column_end":64,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":46,"highlight_end":64}],"label":"the trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1388,"line_start":43,"line_end":43,"column_start":8,"column_end":45,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":45}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncWrite`:\n  &mut T\n  &smol::Async<T>\n  piper::Writer\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\n  smol::async_net::unix::UnixStream\nand 12 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4549,"byte_end":4554,"line_start":129,"line_end":129,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":15,"highlight_end":20}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncWrite`:\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Writer\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m              smol::async_net::unix::UnixStream\u001b[0m\n\u001b[0m            and 12 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1408,"line_start":43,"line_end":43,"column_start":8,"column_end":65,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":65}],"label":"the trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncRead`:\n  &[u8]\n  &mut T\n  &smol::Async<T>\n  piper::Reader\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4542,"byte_end":4546,"line_start":129,"line_end":129,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":8,"highlight_end":12}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncRead`:\u001b[0m\n\u001b[0m              &[u8]\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Reader\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1408,"line_start":43,"line_end":43,"column_start":8,"column_end":65,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":65}],"label":"the trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncWrite`:\n  &mut T\n  &smol::Async<T>\n  piper::Writer\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\n  smol::async_net::unix::UnixStream\nand 12 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4549,"byte_end":4554,"line_start":129,"line_end":129,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":15,"highlight_end":20}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncWrite`:\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Writer\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m              smol::async_net::unix::UnixStream\u001b[0m\n\u001b[0m            and 12 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1409,"byte_end":1414,"line_start":43,"line_end":43,"column_start":66,"column_end":71,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":66,"highlight_end":71}],"label":"the trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/runtimes/smol/mod.rs","byte_start":1409,"byte_end":1414,"line_start":43,"line_end":43,"column_start":66,"column_end":71,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":66,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `smol::io::AsyncRead`:\n  &[u8]\n  &mut T\n  &smol::Async<T>\n  piper::Reader\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4542,"byte_end":4546,"line_start":129,"line_end":129,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":8,"highlight_end":12}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncRead`:\u001b[0m\n\u001b[0m              &[u8]\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Reader\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1409,"byte_end":1414,"line_start":43,"line_end":43,"column_start":66,"column_end":71,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":66,"highlight_end":71}],"label":"the trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/runtimes/smol/mod.rs","byte_start":1409,"byte_end":1414,"line_start":43,"line_end":43,"column_start":66,"column_end":71,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":66,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `smol::io::AsyncWrite`:\n  &mut T\n  &smol::Async<T>\n  piper::Writer\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\n  smol::async_net::unix::UnixStream\nand 12 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::handshake`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4453,"byte_end":4462,"line_start":127,"line_end":127,"column_start":14,"column_end":23,"is_primary":false,"text":[{"text":"pub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>","highlight_start":14,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":4549,"byte_end":4554,"line_start":129,"line_end":129,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    T: Read + Write + Unpin,","highlight_start":15,"highlight_end":20}],"label":"required by this bound in `handshake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncWrite`:\u001b[0m\n\u001b[0m              &mut T\u001b[0m\n\u001b[0m              &smol::Async<T>\u001b[0m\n\u001b[0m              piper::Writer\u001b[0m\n\u001b[0m              smol::Async<T>\u001b[0m\n\u001b[0m              smol::Unblock<T>\u001b[0m\n\u001b[0m              smol::async_fs::File\u001b[0m\n\u001b[0m              smol::async_net::TcpStream\u001b[0m\n\u001b[0m              smol::async_net::unix::UnixStream\u001b[0m\n\u001b[0m            and 12 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::handshake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:129:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn handshake<T, B>(io: T) -> crate::Result<(SendRequest<B>, Connection<T, B>)>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write + Unpin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `handshake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1414,"line_start":43,"line_end":43,"column_start":8,"column_end":71,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":71}],"label":"the trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncRead`:\n  &[u8]\n  &mut T\n  &smol::Async<T>\n  piper::Reader\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::Connection`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1784,"byte_end":1794,"line_start":54,"line_end":54,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Connection<T, B>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1814,"byte_end":1818,"line_start":56,"line_end":56,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Read + Write,","highlight_start":8,"highlight_end":12}],"label":"required by this bound in `Connection`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncRead`:\u001b[0m\n\u001b[0m             &[u8]\u001b[0m\n\u001b[0m             &mut T\u001b[0m\n\u001b[0m             &smol::Async<T>\u001b[0m\n\u001b[0m             piper::Reader\u001b[0m\n\u001b[0m             smol::Async<T>\u001b[0m\n\u001b[0m             smol::Unblock<T>\u001b[0m\n\u001b[0m             smol::async_fs::File\u001b[0m\n\u001b[0m             smol::async_net::TcpStream\u001b[0m\n\u001b[0m           and 14 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::Connection`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:56:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Connection<T, B>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1414,"line_start":43,"line_end":43,"column_start":8,"column_end":71,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":71}],"label":"the trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `smol::io::AsyncWrite`:\n  &mut T\n  &smol::Async<T>\n  piper::Writer\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\n  smol::async_net::unix::UnixStream\nand 12 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::Connection`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1784,"byte_end":1794,"line_start":54,"line_end":54,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Connection<T, B>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1821,"byte_end":1826,"line_start":56,"line_end":56,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    T: Read + Write,","highlight_start":15,"highlight_end":20}],"label":"required by this bound in `Connection`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncWrite`:\u001b[0m\n\u001b[0m             &mut T\u001b[0m\n\u001b[0m             &smol::Async<T>\u001b[0m\n\u001b[0m             piper::Writer\u001b[0m\n\u001b[0m             smol::Async<T>\u001b[0m\n\u001b[0m             smol::Unblock<T>\u001b[0m\n\u001b[0m             smol::async_fs::File\u001b[0m\n\u001b[0m             smol::async_net::TcpStream\u001b[0m\n\u001b[0m             smol::async_net::unix::UnixStream\u001b[0m\n\u001b[0m           and 12 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::Connection`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:56:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Connection<T, B>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1415,"line_start":43,"line_end":43,"column_start":8,"column_end":72,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":72}],"label":"the trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1415,"line_start":43,"line_end":43,"column_start":8,"column_end":72,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `smol::io::AsyncRead`:\n  &[u8]\n  &mut T\n  &smol::Async<T>\n  piper::Reader\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::Connection`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1784,"byte_end":1794,"line_start":54,"line_end":54,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Connection<T, B>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1814,"byte_end":1818,"line_start":56,"line_end":56,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Read + Write,","highlight_start":8,"highlight_end":12}],"label":"required by this bound in `Connection`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncRead` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncRead` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncRead`:\u001b[0m\n\u001b[0m             &[u8]\u001b[0m\n\u001b[0m             &mut T\u001b[0m\n\u001b[0m             &smol::Async<T>\u001b[0m\n\u001b[0m             piper::Reader\u001b[0m\n\u001b[0m             smol::Async<T>\u001b[0m\n\u001b[0m             smol::Unblock<T>\u001b[0m\n\u001b[0m             smol::async_fs::File\u001b[0m\n\u001b[0m             smol::async_net::TcpStream\u001b[0m\n\u001b[0m           and 14 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Read`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::Connection`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:56:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Connection<T, B>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1415,"line_start":43,"line_end":43,"column_start":8,"column_end":72,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":72}],"label":"the trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1415,"line_start":43,"line_end":43,"column_start":8,"column_end":72,"is_primary":false,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `smol::io::AsyncWrite`:\n  &mut T\n  &smol::Async<T>\n  piper::Writer\n  smol::Async<T>\n  smol::Unblock<T>\n  smol::async_fs::File\n  smol::async_net::TcpStream\n  smol::async_net::unix::UnixStream\nand 12 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::client::conn::http1::Connection`","code":null,"level":"note","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1784,"byte_end":1794,"line_start":54,"line_end":54,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Connection<T, B>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs","byte_start":1821,"byte_end":1826,"line_start":56,"line_end":56,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    T: Read + Write,","highlight_start":15,"highlight_end":20}],"label":"required by this bound in `Connection`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `runtimes::smol::SmolStream: smol::io::AsyncWrite` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `smol::io::AsyncWrite` is not implemented for `runtimes::smol::SmolStream`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `smol::io::AsyncWrite`:\u001b[0m\n\u001b[0m             &mut T\u001b[0m\n\u001b[0m             &smol::Async<T>\u001b[0m\n\u001b[0m             piper::Writer\u001b[0m\n\u001b[0m             smol::Async<T>\u001b[0m\n\u001b[0m             smol::Unblock<T>\u001b[0m\n\u001b[0m             smol::async_fs::File\u001b[0m\n\u001b[0m             smol::async_net::TcpStream\u001b[0m\n\u001b[0m             smol::async_net::unix::UnixStream\u001b[0m\n\u001b[0m           and 12 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>` to implement `hyper::rt::Write`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::client::conn::http1::Connection`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:56:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Connection<T, B>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Read + Write,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` operator has incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1351,"byte_end":1415,"line_start":43,"line_end":43,"column_start":8,"column_end":72,"is_primary":true,"text":[{"text":"    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)","highlight_start":8,"highlight_end":72}],"label":"expected `(SendRequest<String>, ...)`, found `(SendRequest<_>, Connection<..., _>)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`?` operator cannot convert from `(hyper::client::conn::http1::SendRequest<_>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>, _>)` to `(hyper::client::conn::http1::SendRequest<std::string::String>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<smol::async_net::TcpStream>, std::string::String>)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected tuple `(hyper::client::conn::http1::SendRequest<std::string::String>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<smol::async_net::TcpStream>, std::string::String>)`\n   found tuple `(hyper::client::conn::http1::SendRequest<_>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>, _>)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: `?` operator has incompatible types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:43:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(hyper::client::conn::http1::handshake(FuturesIo::new(io)).await?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `(SendRequest<String>, ...)`, found `(SendRequest<_>, Connection<..., _>)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `?` operator cannot convert from `(hyper::client::conn::http1::SendRequest<_>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<runtimes::smol::SmolStream>, _>)` to `(hyper::client::conn::http1::SendRequest<std::string::String>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<smol::async_net::TcpStream>, std::string::String>)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected tuple `(hyper::client::conn::http1::SendRequest<\u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::string::String\u001b[0m\u001b[0m>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<\u001b[0m\u001b[0m\u001b[1m\u001b[35msmol::async_net::TcpStream\u001b[0m\u001b[0m>, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::string::String\u001b[0m\u001b[0m>)`\u001b[0m\n\u001b[0m              found tuple `(hyper::client::conn::http1::SendRequest<\u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>, hyper::client::conn::http1::Connection<smol_hyper::rt::FuturesIo<\u001b[0m\u001b[0m\u001b[1m\u001b[35mruntimes::smol::SmolStream\u001b[0m\u001b[0m>, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>)`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `poll_read` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","byte_start":2464,"byte_end":2473,"line_start":63,"line_end":63,"column_start":12,"column_end":21,"is_primary":false,"text":[{"text":"        fn poll_read(","highlight_start":12,"highlight_end":21}],"label":"the method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":1826,"byte_end":1835,"line_start":61,"line_end":61,"column_start":59,"column_end":68,"is_primary":true,"text":[{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_read(cx, buf),","highlight_start":59,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait `AsyncRead` which provides `poll_read` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":47,"byte_end":47,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::{bail, Result};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use smol::io::AsyncRead;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"there is a method `poll_read_vectored` with a similar name","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":1826,"byte_end":1835,"line_start":61,"line_end":61,"column_start":59,"column_end":68,"is_primary":true,"text":[{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_read(cx, buf),","highlight_start":59,"highlight_end":68}],"label":null,"suggested_replacement":"poll_read_vectored","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `poll_read` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:61:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_read(cx, buf),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs:63:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn poll_read(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `AsyncRead` which provides `poll_read` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use smol::io::AsyncRead;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `poll_read_vectored` with a similar name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_read\u001b[0m\u001b[0m\u001b[38;5;10m_vectored\u001b[0m\u001b[0m(cx, buf),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `poll_write` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","byte_start":5484,"byte_end":5494,"line_start":132,"line_end":132,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"        fn poll_write(","highlight_start":12,"highlight_end":22}],"label":"the method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":2197,"byte_end":2207,"line_start":74,"line_end":74,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_write(cx, buf),","highlight_start":59,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `write` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs","byte_start":79585,"byte_end":79682,"line_start":2797,"line_end":2799,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    fn write<'a>(&'a mut self, buf: &'a [u8]) -> WriteFuture<'a, Self>","highlight_start":5,"highlight_end":1},{"text":"    where","highlight_start":1,"highlight_end":1},{"text":"        Self: Unpin,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `AsyncWrite` which provides `poll_write` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":47,"byte_end":47,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::{bail, Result};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use smol::io::AsyncWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `poll_write` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:74:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_write(cx, buf),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs:132:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn poll_write(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `write` with a similar name, but with different arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs:2797:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2797\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write<'a>(&'a mut self, buf: &'a [u8]) -> WriteFuture<'a, Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2798\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2799\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: Unpin,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `AsyncWrite` which provides `poll_write` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+ use smol::io::AsyncWrite;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `poll_close` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","byte_start":8837,"byte_end":8847,"line_start":210,"line_end":210,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"        fn poll_close(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>;","highlight_start":12,"highlight_end":22}],"label":"the method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":2489,"byte_end":2499,"line_start":81,"line_end":81,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_close(cx),","highlight_start":59,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `close` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs","byte_start":82046,"byte_end":82121,"line_start":2877,"line_end":2879,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    fn close(&mut self) -> CloseFuture<'_, Self>","highlight_start":5,"highlight_end":49},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        Self: Unpin,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `AsyncWrite` which provides `poll_close` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":47,"byte_end":47,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::{bail, Result};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use smol::io::AsyncWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `poll_close` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:81:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_close(cx),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs:210:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn poll_close(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `close` with a similar name, but with different arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs:2877:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2877\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn close(&mut self) -> CloseFuture<'_, Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2878\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2879\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: Unpin,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `AsyncWrite` which provides `poll_close` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+ use smol::io::AsyncWrite;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `poll_flush` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","byte_start":8041,"byte_end":8051,"line_start":193,"line_end":193,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"        fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>;","highlight_start":12,"highlight_end":22}],"label":"the method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/runtimes/smol/mod.rs","byte_start":2771,"byte_end":2781,"line_start":88,"line_end":88,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"            SmolStream::Plain(stream) => Pin::new(stream).poll_flush(cx),","highlight_start":59,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `flush` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs","byte_start":81561,"byte_end":81636,"line_start":2856,"line_end":2858,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    fn flush(&mut self) -> FlushFuture<'_, Self>","highlight_start":5,"highlight_end":49},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        Self: Unpin,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `AsyncWrite` which provides `poll_flush` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/runtimes/smol/mod.rs","byte_start":47,"byte_end":47,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::{bail, Result};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use smol::io::AsyncWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `poll_flush` found for struct `std::pin::Pin<&mut smol::async_net::TcpStream>` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/runtimes/smol/mod.rs:88:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SmolStream::Plain(stream) => Pin::new(stream).poll_flush(cx),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs:193:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::pin::Pin<&mut smol::async_net::TcpStream>` here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `flush` with a similar name, but with different arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/rogerio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/io.rs:2856:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2856\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn flush(&mut self) -> FlushFuture<'_, Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2857\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: Unpin,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `AsyncWrite` which provides `poll_flush` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+ use smol::io::AsyncWrite;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 21 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 21 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0046, E0053, E0277, E0308, E0407, E0412, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0046, E0053, E0277, E0308, E0407, E0412, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0046`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0046`.\u001b[0m\n"}
